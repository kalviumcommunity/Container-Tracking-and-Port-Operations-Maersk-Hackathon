// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Analytics", b =>
                {
                    b.Property<int>("AnalyticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnalyticsId"));

                    b.Property<int?>("BerthId")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("MetricTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("PercentageChange")
                        .HasColumnType("numeric");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("PortId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PreviousPeriodValue")
                        .HasColumnType("numeric");

                    b.Property<int?>("ShipId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("TargetValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Trend")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("AnalyticsId");

                    b.HasIndex("BerthId");

                    b.HasIndex("ShipId");

                    b.HasIndex("MetricType", "MetricTimestamp");

                    b.HasIndex("PortId", "Period", "MetricTimestamp");

                    b.ToTable("Analytics");
                });

            modelBuilder.Entity("Backend.Models.Berth", b =>
                {
                    b.Property<int>("BerthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BerthId"));

                    b.Property<string>("AvailableServices")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("CraneCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentLoad")
                        .HasColumnType("integer");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("numeric");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("MaxDraft")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MaxShipLength")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PortId")
                        .HasColumnType("integer");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BerthId");

                    b.HasIndex("PortId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("IX_Berths_PortId_Identifier_Unique")
                        .HasFilter("\"Identifier\" IS NOT NULL AND \"Identifier\" != ''");

                    b.ToTable("Berths");
                });

            modelBuilder.Entity("Backend.Models.BerthAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualDeparture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ActualProcessingTime")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("BerthId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContainerCount")
                        .HasColumnType("integer");

                    b.Property<string>("ContainerId")
                        .HasColumnType("character varying(11)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("EstimatedProcessingTime")
                        .HasColumnType("numeric");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ReleasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ScheduledArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ScheduledDeparture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ShipId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ShipId");

                    b.HasIndex("BerthId", "AssignedAt");

                    b.ToTable("BerthAssignments");
                });

            modelBuilder.Entity("Backend.Models.BerthUsageCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseCharges")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("BerthAssignmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ChargedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("ServiceCharges")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("TotalCharges")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("TotalHours")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BerthAssignmentId");

                    b.ToTable("BerthUsageCharges");
                });

            modelBuilder.Entity("Backend.Models.Container", b =>
                {
                    b.Property<string>("ContainerId")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("CargoDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CargoType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EstimatedArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("MaxWeight")
                        .HasColumnType("numeric");

                    b.Property<int?>("ShipId")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("ContainerId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("ShipId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("Backend.Models.ContainerMovement", b =>
                {
                    b.Property<int>("MovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MovementId"));

                    b.Property<DateTime?>("ActualCompletion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("BerthId")
                        .HasColumnType("integer");

                    b.Property<string>("ContainerId")
                        .IsRequired()
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DistanceKm")
                        .HasColumnType("numeric");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EstimatedCompletion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("Humidity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("MovementTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PortId")
                        .HasColumnType("integer");

                    b.Property<int?>("RecordedByUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShipId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("numeric");

                    b.Property<string>("ToLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MovementId");

                    b.HasIndex("BerthId");

                    b.HasIndex("PortId");

                    b.HasIndex("RecordedByUserId");

                    b.HasIndex("ShipId");

                    b.HasIndex("ContainerId", "MovementTimestamp");

                    b.ToTable("ContainerMovements");
                });

            modelBuilder.Entity("Backend.Models.ContainerMovementHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContainerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Equipment")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FromLocation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("MovedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("ToLocation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.ToTable("ContainerMovementHistory");
                });

            modelBuilder.Entity("Backend.Models.ContainerStorageFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContainerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DailyStorageRate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("FeeStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("PortId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StorageEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StorageStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalDays")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalFees")
                        .HasColumnType("decimal(15,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("PortId");

                    b.ToTable("ContainerStorageFees");
                });

            modelBuilder.Entity("Backend.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventId"));

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AcknowledgedByUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("BerthId")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContainerId")
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("EventTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int?>("PortId")
                        .HasColumnType("integer");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("RequiresAction")
                        .HasColumnType("boolean");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ShipId")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EventId");

                    b.HasIndex("AcknowledgedByUserId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("BerthId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("PortId");

                    b.HasIndex("ShipId");

                    b.HasIndex("Status");

                    b.HasIndex("EventTimestamp", "Priority");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Backend.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsSystemPermission")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PermissionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Backend.Models.Port", b =>
                {
                    b.Property<int>("PortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PortId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentContainerCount")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentShipCount")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("MaxShipCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OperatingHours")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalContainerCapacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PortId");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RoleId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Backend.Models.RoleApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ApplicationId"));

                    b.Property<string>("Justification")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestedRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReviewNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ApplicationId");

                    b.HasIndex("RequestedAt");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("RoleApplications");
                });

            modelBuilder.Entity("Backend.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GrantedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("GrantedByUserId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Backend.Models.Ship", b =>
                {
                    b.Property<int>("ShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipId"));

                    b.Property<decimal?>("Beam")
                        .HasColumnType("numeric");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentPortId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Draft")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EstimatedArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("GrossTonnage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Heading")
                        .HasColumnType("numeric");

                    b.Property<string>("ImoNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NextPort")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Speed")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("integer");

                    b.HasKey("ShipId");

                    b.HasIndex("CurrentPortId");

                    b.HasIndex("ImoNumber")
                        .HasDatabaseName("IX_Ships_ImoNumber_Unique")
                        .HasFilter("\"ImoNumber\" IS NOT NULL AND \"ImoNumber\" != ''");

                    b.HasIndex("Name");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("Backend.Models.ShipContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContainerId")
                        .IsRequired()
                        .HasColumnType("character varying(11)");

                    b.Property<DateTime>("LoadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ShipId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipContainers");
                });

            modelBuilder.Entity("Backend.Models.ShipRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualDeparture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DestinationPortId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("FuelConsumption")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("OriginPortId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PortDelay")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("RouteNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RouteStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("ScheduledArrival")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ScheduledDeparture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ShipId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("WeatherDelay")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationPortId");

                    b.HasIndex("OriginPortId");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipRoutes");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("PortId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PortId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AssignedByUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("AssignedByUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Backend.Models.Analytics", b =>
                {
                    b.HasOne("Backend.Models.Berth", "Berth")
                        .WithMany("Analytics")
                        .HasForeignKey("BerthId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.Port", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Berth");

                    b.Navigation("Port");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Backend.Models.Berth", b =>
                {
                    b.HasOne("Backend.Models.Port", "Port")
                        .WithMany("Berths")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("Backend.Models.BerthAssignment", b =>
                {
                    b.HasOne("Backend.Models.Berth", "Berth")
                        .WithMany("BerthAssignments")
                        .HasForeignKey("BerthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Container", "Container")
                        .WithMany("BerthAssignments")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.Ship", "Ship")
                        .WithMany("BerthAssignments")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Berth");

                    b.Navigation("Container");

                    b.Navigation("CreatedBy");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Backend.Models.BerthUsageCharge", b =>
                {
                    b.HasOne("Backend.Models.BerthAssignment", "BerthAssignment")
                        .WithMany()
                        .HasForeignKey("BerthAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BerthAssignment");
                });

            modelBuilder.Entity("Backend.Models.Container", b =>
                {
                    b.HasOne("Backend.Models.Ship", "Ship")
                        .WithMany("Containers")
                        .HasForeignKey("ShipId");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Backend.Models.ContainerMovement", b =>
                {
                    b.HasOne("Backend.Models.Berth", "Berth")
                        .WithMany("ContainerMovements")
                        .HasForeignKey("BerthId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.Container", "Container")
                        .WithMany("Movements")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Port", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.User", "RecordedByUser")
                        .WithMany()
                        .HasForeignKey("RecordedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Berth");

                    b.Navigation("Container");

                    b.Navigation("Port");

                    b.Navigation("RecordedByUser");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Backend.Models.ContainerMovementHistory", b =>
                {
                    b.HasOne("Backend.Models.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Container");
                });

            modelBuilder.Entity("Backend.Models.ContainerStorageFee", b =>
                {
                    b.HasOne("Backend.Models.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Port", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Container");

                    b.Navigation("Port");
                });

            modelBuilder.Entity("Backend.Models.Event", b =>
                {
                    b.HasOne("Backend.Models.User", "AcknowledgedByUser")
                        .WithMany()
                        .HasForeignKey("AcknowledgedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.Berth", "Berth")
                        .WithMany("Events")
                        .HasForeignKey("BerthId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.Container", "Container")
                        .WithMany("Events")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.Port", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AcknowledgedByUser");

                    b.Navigation("AssignedToUser");

                    b.Navigation("Berth");

                    b.Navigation("Container");

                    b.Navigation("Port");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Backend.Models.RoleApplication", b =>
                {
                    b.HasOne("Backend.Models.User", "ReviewedByUser")
                        .WithMany("ReviewedApplications")
                        .HasForeignKey("ReviewedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("RoleApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.RolePermission", b =>
                {
                    b.HasOne("Backend.Models.User", "GrantedByUser")
                        .WithMany()
                        .HasForeignKey("GrantedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrantedByUser");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Backend.Models.Ship", b =>
                {
                    b.HasOne("Backend.Models.Port", "CurrentPort")
                        .WithMany("DockedShips")
                        .HasForeignKey("CurrentPortId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentPort");
                });

            modelBuilder.Entity("Backend.Models.ShipContainer", b =>
                {
                    b.HasOne("Backend.Models.Container", "Container")
                        .WithMany("ShipContainers")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Ship", "Ship")
                        .WithMany("ShipContainers")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Container");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Backend.Models.ShipRoute", b =>
                {
                    b.HasOne("Backend.Models.Port", "DestinationPort")
                        .WithMany()
                        .HasForeignKey("DestinationPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Port", "OriginPort")
                        .WithMany()
                        .HasForeignKey("OriginPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationPort");

                    b.Navigation("OriginPort");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.Port", "Port")
                        .WithMany("AssignedUsers")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Port");
                });

            modelBuilder.Entity("Backend.Models.UserRole", b =>
                {
                    b.HasOne("Backend.Models.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Backend.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Models.Berth", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("BerthAssignments");

                    b.Navigation("ContainerMovements");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Backend.Models.Container", b =>
                {
                    b.Navigation("BerthAssignments");

                    b.Navigation("Events");

                    b.Navigation("Movements");

                    b.Navigation("ShipContainers");
                });

            modelBuilder.Entity("Backend.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Backend.Models.Port", b =>
                {
                    b.Navigation("AssignedUsers");

                    b.Navigation("Berths");

                    b.Navigation("DockedShips");
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Backend.Models.Ship", b =>
                {
                    b.Navigation("BerthAssignments");

                    b.Navigation("Containers");

                    b.Navigation("ShipContainers");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("ReviewedApplications");

                    b.Navigation("RoleApplications");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
