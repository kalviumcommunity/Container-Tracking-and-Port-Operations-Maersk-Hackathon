// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250929102229_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Berth", b =>
                {
                    b.Property<int>("BerthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BerthId"));

                    b.Property<string>("BerthNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("PortId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BerthId");

                    b.HasIndex("PortId", "BerthNumber");

                    b.ToTable("Berths");
                });

            modelBuilder.Entity("Backend.Models.BerthAssignment", b =>
                {
                    b.Property<int>("BerthAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BerthAssignmentId"));

                    b.Property<DateTime?>("ActualDepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BerthId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpectedDepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ShipId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BerthAssignmentId");

                    b.HasIndex("BerthId");

                    b.HasIndex("ShipId", "BerthId");

                    b.ToTable("BerthAssignments");
                });

            modelBuilder.Entity("Backend.Models.BerthAssignmentContainer", b =>
                {
                    b.Property<int>("BerthAssignmentContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BerthAssignmentContainerId"));

                    b.Property<int>("BerthAssignmentId")
                        .HasColumnType("integer");

                    b.Property<string>("ContainerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BerthAssignmentContainerId");

                    b.HasIndex("BerthAssignmentId");

                    b.HasIndex("ContainerId");

                    b.ToTable("BerthAssignmentContainers");
                });

            modelBuilder.Entity("Backend.Models.Container", b =>
                {
                    b.Property<string>("ContainerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ShipId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ContainerId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("ShipId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("Backend.Models.Port", b =>
                {
                    b.Property<int>("PortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PortId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalContainerCapacity")
                        .HasColumnType("integer");

                    b.HasKey("PortId");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("Backend.Models.Ship", b =>
                {
                    b.Property<int>("ShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipId"));

                    b.Property<string>("IMONumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ShipId");

                    b.HasIndex("IMONumber");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("Backend.Models.ShipContainer", b =>
                {
                    b.Property<int>("ShipContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ShipContainerId"));

                    b.Property<string>("ContainerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShipId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ShipContainerId");

                    b.HasIndex("ContainerId");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipContainers");
                });

            modelBuilder.Entity("Backend.Models.Berth", b =>
                {
                    b.HasOne("Backend.Models.Port", "Port")
                        .WithMany("Berths")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("Backend.Models.BerthAssignment", b =>
                {
                    b.HasOne("Backend.Models.Berth", "Berth")
                        .WithMany("BerthAssignments")
                        .HasForeignKey("BerthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Ship", "Ship")
                        .WithMany("BerthAssignments")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Berth");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Backend.Models.BerthAssignmentContainer", b =>
                {
                    b.HasOne("Backend.Models.BerthAssignment", "BerthAssignment")
                        .WithMany("BerthAssignmentContainers")
                        .HasForeignKey("BerthAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Container", "Container")
                        .WithMany("BerthAssignmentContainers")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BerthAssignment");

                    b.Navigation("Container");
                });

            modelBuilder.Entity("Backend.Models.Container", b =>
                {
                    b.HasOne("Backend.Models.Ship", "Ship")
                        .WithMany("Containers")
                        .HasForeignKey("ShipId");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Backend.Models.ShipContainer", b =>
                {
                    b.HasOne("Backend.Models.Container", "Container")
                        .WithMany("ShipContainers")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Models.Ship", "Ship")
                        .WithMany("ShipContainers")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Container");

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("Backend.Models.Berth", b =>
                {
                    b.Navigation("BerthAssignments");
                });

            modelBuilder.Entity("Backend.Models.BerthAssignment", b =>
                {
                    b.Navigation("BerthAssignmentContainers");
                });

            modelBuilder.Entity("Backend.Models.Container", b =>
                {
                    b.Navigation("BerthAssignmentContainers");

                    b.Navigation("ShipContainers");
                });

            modelBuilder.Entity("Backend.Models.Port", b =>
                {
                    b.Navigation("Berths");
                });

            modelBuilder.Entity("Backend.Models.Ship", b =>
                {
                    b.Navigation("BerthAssignments");

                    b.Navigation("Containers");

                    b.Navigation("ShipContainers");
                });
#pragma warning restore 612, 618
        }
    }
}
